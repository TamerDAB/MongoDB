<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.ErrorImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAABGdBTUEAALGPC/xhBQAAFLZJREFUeF7t
        nd+vbkdZx/1ruPLCBG8kesENRi8kEaI3NMFIUjQxsXghocJVIajxRyCmaiJBgQRIqEpJNKFg4KKWtvyo
        0kNPPCmFtkd7bAtHD6S0hZfzec/7NLNnPzPzzHrXmrXes7+f5Mne+12zZs2a9XznxzPzrv0zOyFEEQlE
        iAoSiBAVJBAhKkggQlSQQISoIIEIUUECEaKCBCJEBQlEiAoSiBAVJBAhKkggQlSQQISoIIEIUUECEaKC
        BCJEBQlEiAoSiBAVJBAhKkggQlSQQISoIIEIUUECEaKCBCJEBQlEiAoSiBAVJJCV+e4Pn9h94flP7P7+
        mfft/vzJd+x/8jefi/WRQFbi8o1H9oJ45zd/rmgcl1DWRQJZgQdf/GdXECUjvVgHCWQwveIwk0jWQQIZ
        yPM/etZ1/rsu/eLuo8+8d3f/c/fuf/K3l47zxVgkkIHc+527zjk9gvjBq/93SHEL/uZzL60YiwQyCJy+
        1+Hv/c7vnzsnF5NYFglkEN7co+Xsnqi+fv2Lh6NiBBLIIJhfpI7+Z0/+9uFIHdKl55GPGIcEMggJ5DSR
        QAaRC+SeK795OFLn7su/euY8CWQsEsggmDukjo61VslZbc/P4TMxDglkIPn6Br1IaaLO5xxP03O+GIsE
        MpB8mIUhgrxX+Mb1fzsnDqxneMWi4uee++v9fq53Xfql167FWsyD3/vsIZVoIYEEwNk+ffVP985mcwJz
        Npw5Cr3Cey7/yhmnT622efGeK7/RDAsDaSirl0dqiEYh4zYSSAWcje3nnoOlhmiicwPmHaWtJCUjfWRX
        rzcsaxn3J8pIIAVwyDyC1LLohkLypkfw8siNdBFxQK84zBQZKyOBONAS27i913qiTA88//HikIvPOR6F
        tHke9DxsZ6FMGEMqb/sK1lPui4QE4uDNBXBYWlpzNnoLz7npdSJzhRR6CMuTn9EeIyUXdG1Y5m174Z7F
        eSSQDJwqd57SBJnPvF230aHWXHhrLK0ewYuo9Qr7IiCBZHz66p+ccRpa4pbj5D1JdBvJXOTOjqBbcE/p
        OVhLVBcRCSQj3/sU+Q6GN2QZST6vQOQR8kCBJuvnkUAyUofBImsFtLz5eSOZLpCzUa+eoMBFQQLJSB0G
        i8wnvK/S1rj+ox/vvvDsD3f/9NQP9r97cPy3vvS/e/vYf/3/4VOf80Os9kZIDbFiSCAZ+RAr0hr3DLG+
        9b2Xd2/47NXdz37m2b3xO2JI+cebwrHjZh/8xvcPR8+jSfpySCAZ+SSd8GnLcfKwcG2STo+QO/8v/8v/
        HI7e4q0PPHcuDfbMjVcOKc6Tr85T7p4wL8M0cR4JJMMP85Z33XpbUWrDMs/xsYevvXRIEUuT4/UIGOW7
        fOPRvbFvzHtxBDZl7eUiIIE45MMsjBaZV4Kas7Ej1tvaQci31uO86WZv4Tl/2ju83ellfuHmUKxFaZW8
        ZdFJ/UVEAnFg0p0PWaLWaokj8wvmKamQEAfntUCY0T1eZnqVUB0JpACO3iuSSMQLmJTTS2D/UIhQEd1C
        FFht7uGRz6M8494U1m0jgVSgJ4m0yAyrtjaGp+zMS9LhIqLgb4ShiFUMCSQAIVOGIumWEn5nzB/pNegx
        7n70xb3VJto16EXSCNgfP1YO+4r5kEAWxptzROYTOV7o968uqRdYGglkYdJFQTM+64FJe54Hlq+fiPmR
        QBbGc2ysB4ZlXh5EusSySCAL4617THHstzhDrNr2EzEPEsjCMEFPnZo1jSkTdYZZ6QIi4ihtdBTzIYEM
        gAgUE2rWPHrXNHIkirFIIBsGMT1ys7fBpsL6DNtieIkcpv+g24cEEoBFN3tLoa2DYPzN5xzvgeGSrWkQ
        0fLCvnl4mDBvT+9R2itmxjG9OK6NBNIAAXgOlhtvM4xCeDZ1fiwVCULIj2ORSTkr5KUdu57pxXF1JJAK
        kbcqplbbFm/kk3YzJuBGKaybpvG4tVmx/+VxEkkZCaRAZMOfZ633S0Wcv7Qw+HsPvnBI4VMSNPvJ2CrD
        1pj8DSxm2rjoI4E4eC9hwHAyjjHn4Cci8nb81t4OwvCJUG/u/PmuXm/dI/9qbopXZsrG5zneWxgj35y8
        iEggDt4XjzxHA29bPM5Wg14kFYk3t0BIfE7PQs9REwcg3rQMlKkWPPC+x65e5DwSSAZO1es4XusdiRAh
        lGPXRQxEmV6/1osZ+Tcn9b3080ggGZ6zR4Ye+dg+4qBz4Yk6staRf4+d9wqLs0ggGbnT1N5QkpIPcUZ+
        z9sTdQRvmCXOIoFk5AIhbBphzeEKPVx6bSzSg+STdXpBcRYJJGPqECv/Zzsjh1iQD/EiPVi+ZqI5yHkk
        kAyvNW45m/cittHbOPIhHlbrRbxQb/SlExcJCcTBczY2+XkghDyCtMZQBTGkZcDsXV4pTOi9f/JJWFic
        RwJx8JwNY5WcTYD2lsLSynXveoLlRf5m/N3zH3ShtPqPUMiztg1ldI93KkggBbwhSMSiUS9gvtP6R6Ec
        jzovw8PeF8dhIyNup4YEUqHUIpcM54xM6CG6S9iM9BG4vrcToGS9vd1FQwJpQOvt7bfKracVnto79Tgz
        5c5Dz6nZvjJRRwIJQoSHltmGMEzEcUDCudFeA7wwsuVHXmZ52NYssr6RYhsryROB8Xttj5Y4iwQyGCbL
        udOXegavp+F8MQ4JZCDenqnW0IyWPz9HPcA4JJCBeAuKreEZx/NztKA3DglkIHlvEA0J55Nt8hFjkEAG
        IoGcHhLIQHKBRL9/sfZGyIuMBDIQbwtLay3CCwu3zhHzIYEMJl90pHcoTdT5PO89tKlwLBLIYLy1DTYT
        sgnShMJP/s53CWMaXo1FAlmBKRsKMc4TY5FAVoAeorSVpGSk1wLheCSQlUAkefi2ZKSz4ZcYiwSyMrVd
        t2yO1BeZ1kUC2Qj0EIRvzcQ2kECEqCCBCFFBAhGiggQiRAUJRIgKEogQFSQQISpIIEJUkEBOiPc+/sre
        vnit/P/SP/LUq800W+bvDuXn5xY4CYF86ulX93bjlZ8cPpmHh1748T7f/7x+Gs706w+9vLdP3iyzB/dj
        abBTBHFQdn5ugZMQiD3wD12Zr9IQ2x2P1B1ua1g9lMr75I2fvJbmbTfv7RSRQCZgDx2bq7VHbJbn7SIQ
        oH44/txL8/a2o5BAJmCOgf3BfxzfMuJEaZ63k0BOHQlkAuYYZvdfPc5BEFmanwSyHSSQCZhjMK7mJ3OH
        qRN2ojuW17sOQpFAtoMEMoHUMe782q3fp0zY04k5vZA9jB6HY2xP5OuDl2+FXDH+/sqL0+dGiNbCsxh5
        k2c+j0jroYSFSXvCvJQ9vyfK03NPlPX+/3519+Gbz8XywPibskQbNM7hHvm5BU5OIOn8gahNDzgP59Fz
        gD2MiEC4lqUv2Tu//nKXY+KUJtiS4bTmXPZZrbw990RZKbPl6xnlw/FL8Dxa9YKRD2HoFpYXP7fAyQkE
        cJreSkxDoBYJizoTD9YcmaEZvRefkQ/G+dazYbSaNXD41KnIE/HisORH78Y10iElLbSln0MglNHys3vi
        ulyfclCe1j2R3o5jPBeua/VCPul9YK0GxMrf82yX5CQFgrNYpbcq3LCKT4dmEWdCWCYO0teGCqnD1PI0
        gWO1FWOuRXlJlwYWanlH7ikVB/mX7onPycfS5j2ANTqkqdULz8vme9RlLa2Vn59b4CQFAvbgWhUOtsKM
        qNK0EWcyx+QBt64DCJb0WD6HgPR47bopNjSMnNe6J6uLVj4ppEP8Ht49etCj2HVrjZoEMoHSA7UhQKsV
        tnF2fn7LmdKHGnUEsHzT3sqwsvQ6QDrcqTl2657seO/15yDyvNYsn8dJCyRtDUsTds7hOA8np+VMNrxh
        SNSDlYveLSWdB0WHhka056nd0zHXn4OI80fSjOSkBQK1CqXVt3PpDXLs3JLDtY6XoNey66Y9TzpH6SXN
        c6pA0gYlMlycm9qzMiJpRnLyAklFkLeKVtmlHsCOlxzO8j3GUmFyHft8CnbuVIEce/0S3CN13AoZm9Wc
        38pfSzOSkxcI2INPJ+w2f2BiXpo/RAXC8Iy0Uywd+qXlnIKVp1Re4JqlNHZ9bC7SiBiW339qFnnk9xIc
        a6UZyW0hEESRTwBLE/MUexilNHNvRVl7iJXOY+Ygja5xb61hW8T5I2lGclsIBNLxtbVq3sQ8peZMYOsV
        cz2sNCpGeXuYe5Lee30PesJWeVIizh9JM5LbRiBglWvmTcxTLH0p31R0pShZL9bT9UbG0nubKhCw6x/r
        gKnYW/VsWNlq146kGcltJZB0wh5xQHsYtXzNoVgwjEZ+SnMe4FpWxmioNR2aYccIJM0ren0airyB6O2N
        UkFJIDNjFdsSCOAAVG7NSY2WM0HqCIiklS+OwNDD27tk2NwGazkpGwVJxwTXxHqMQMDSYLWNiJAO7fKe
        wibdrcaIOkwjXDXnt7LV0ozkthNIDxFnApzEnAHD+dkK/s2bDkOvwk/SpI5X25qCyMzZMYTH+eTDMcsv
        3X+Fc0bKG0lDuVKRch2EwnVx5tL95KS9ESLJBcS92I5l6i8yp7Nr1tKMRAIJ5ovjpE5Vs9pWCgMnNYep
        GULi2hApb889pVGompGuJPZIHnYPlIm/a85v5a+lGclJCITKwmjV5oSH25svD5otKJxnvQo/+ZsWNTK0
        SyG9lcPyQ4iIJy9XpLy998T1bVhqvZrdD3mZOGuQB3WSNiDkZfdg4uJ3y7eElb+WZiQnIRAh1kICEaKC
        BCJEBQlEiAqrCYSQICHAtUyICKsJxEJ+a5kQESQQISpIIEJUkECEqCCBCFHhQgqEawsRYTWBEObFUeey
        6EZC9gcJEWU1gcxJ+s2/miGi0q7UHticZ1vCbV2F3227+ppY2eyN7ek29lFwLa5pdYONLsNcnLxAqHT7
        bnTN2KF6jPPicHwPJHIt+8JU/v2IHtjR6uVtlubNffHvCtLvj3hm5VpCxDQQke37mLdTeauctEDoDaLv
        YpraevEgo9fwjHOnvCAhIhDun9bZO94yBDVHb8r1I42GZ5zX+kbj2py0QFotptmU1grnaTlpj5FXj0O2
        ro3oovdfMs6f2pvQ4Bx7fTPymUOsS3CyAmGo4FV2blO+eBMdtvUavUm0J5tTnDWb4pxL1A/5Te3ll+Qk
        BZJ+F7pmUyJWS4nDLOoIowSCeW+hL7Fk/ZDvEvOjYzg5gSwZsSL9MfONqEVa7ZECwSKOSZl7xMEz4D6i
        IXiM9FvipAQSbb2mRqzs3x1EjN6J9RcEi/F7j1O3hn5TBGLfJTfz0pQs0otEolR8F505X94A8Def2/fe
        a0ZdboWTEUhP6z5lLEtUyMsrN1rDmvi4drTFrOXT4+CkLYWUcUp7GUTNqNsakfpBZK2ekeOthohGsJXP
        KE5GINGIyZSIFURax+ichocbcfBaqx0VSKTlR7TeubnVBNuqH8rbQ+v+pj7HuTkJgSwZsQIc2ssvNYYG
        Pa0aaVvDCVrKEhGB9DgldePlkVqpF4rUT++QlvRePmbRxmhpNi+QJSNWRmTiP6VFYyzt5ZVaySkjAimd
        69FySKw09m/VD0PKKbR6pS2waYEsGbFKiTjyFCJOSQPg0RIIvVMvXj6plQTSqh96ePZa9VprZDBlLjk3
        mxXI0hGrlJYz9gxlcloT9pJTLlGmVp5Ty7KU9fSQS7FJgdAbLBmxylnCGY2pebfOKzlzjal5ts5byhhB
        rM0mBbJ0xCpnqhNHmJp367yLIJDS8HMkmxPI0hErj6lOHKGVd+k+pjpzjal5ts5byjTEyuABeRWV29wh
        wMjC1VS8/FKb6pQjBdKqH+ZZnDu3HTu3nIPNCIThklf5uR0bsfKIhJKnzHUiUbjSOHtLAmnVT2sV/pTZ
        hEBGRqw8uL53vdSm9FqRoUnpfrYkkEj9bGXle25WFwi9QUQc2BwRqxKtcCzW4wSRXqkmui0JBCK7AqY0
        XjzTuUcEc7KqQKiY0RGrEtEhXqQcc+S1NYFE7gmR9DRi5Mk5U760NYpVBRKNWDHGTd+QMYd5zhnZio3h
        aLzEIX2o/M5nLSc0o8eqsTWBQLR+eK61fV3UfV6WNUVy45Xruy9f+8zhr7OsJhAeRlpBo40HlMND9dIu
        Ya2WdosCmVI/XNOstfhLmtHc9/SHd3d97Y17kXisJpDWw1raSg9jhHBrQyujVT9rCASWrh96n6V56sal
        3ce//f7dnQ///O6Of3/d7l+vfvRw5DwSiEMr7n+MRcQBWxUILFk/c0cqr7309O5b17+y7yn+8onffU0U
        Znc/9muHlD4SSAEc2TtvqvHgo+KALQsE5q4fjHlZZJJPD/DVFx7YOz32t1fevfvA43ecsVQENbt0/aFD
        rj4SSAUe1hzlJI/eVnFOZzbmzpN7mqN+MHql0iSdXuDL1+7b9wCek0+1j337nsMVykggAZictr7c4xnn
        TN1PdAoCMWhIcPDId99TIz3nlRoPWvee3qDH7nz49cWJecpqAqGL5oGsZT3DHcNClJyPs3nGMbaPHBuy
        bNXPFOEtkWcOeZAXju/VD41G61r0GEsJw6w1tDJWE4gQHqxH5BPpuS0ytDIkELEZmGx7Dj2nEbWKDK0M
        CURsAtYiPIee05h3EAHrQQIRq/PoC593HXpuK20nqSGBiFVhuLP0nAP7myt/eLhiHxKIWBUmzJ5Dz2nv
        f/xth6v1I4GI1aD38Bw6amwybPU+vZPyHAlErMbUiTmTbXqe1lpJdDGwhgQiVuOPHnuz69glw+Hve/pD
        +0l9q+eYErHykEDEaniO7ZkJgxX2yFrJXOIACUSsAls9POdOjfmDhWYZjkWiXZyDkOZCAhGzwpifnbds
        Q2dLeslZSVNycOstLB2TcS9tbsdOyD0kEDELOOaUrSIMh/7iid/Z9xAmCn4isJ71kZ79VT1IIGIWIhEp
        WnjWJHBmhk7pPIHf6S2mTNyZtC+FBCJmh/mFWWvIwwr31JV0zp17SJUjgYhVuRWyfb0rgJIhjDkn4jUk
        ELE6ODvzEE8MZkzUGZqNEoYhgYjNwHCJYRlRLDN6mNGiSJFAhKgggQhRQQIRooIEIkQFCUSIChKIEBUk
        ECEqSCBCVJBAhCiy2/0UqZ/zCSzwaisAAAAASUVORK5CYII=
</value>
  </data>
</root>